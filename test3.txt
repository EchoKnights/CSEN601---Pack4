; Test LDI (load immediate)
LDI R1, #10
LDI R2, #-5
LDI R3, #0

; Test ADD, SUB, MUL
ADD R4, R1
SUB R5, R2
MUL R6, R1

; Test AND, OR
LDI R7, #15
LDI R8, #8
AND R9, R7
OR  R10, R8

; Test SLC, SRC (shift left/right circular)
LDI R11, #3
LDI R12, #1
SB R11, #1         ; Store R11 (3) at DATA_MEMORY[1]
SLC R13, #1        ; Shift R13 (0) by DATA_MEMORY[1] (3) bits left circular
SRC R14, #1        ; Shift R14 (0) by DATA_MEMORY[1] (3) bits right circular

; Test LB, SB (load/store byte)
LDI R15, #31       ; Changed from 42 to 31 (max positive 6-bit)
SB R15, #2         ; Store R15 (31) at DATA_MEMORY[2]
LB R16, #2         ; Load DATA_MEMORY[2] into R16 (should be 31)

; Test BEQZ (branch if equal zero)
LDI R17, #0
BEQZ R17, #2       ; Should skip next instruction if R17==0
LDI R18, #28       ; Should be skipped
LDI R18, #18       ; Should be executed

; Test JR (jump register)
LDI R19, #25       ; R19 = 25 (target address to jump to)
JR R19, R0         ; Jump to instruction 25 (skips the next instruction)

LDI R20, #11      ; This will be skipped by the jump
LDI R21, #21      ; This will be executed after the jump

; Test NOP
NOP

; Test HALT
HALT